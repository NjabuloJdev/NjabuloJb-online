import moment from "moment-timezone";
import fs from "fs";
import os from "os";
import config from "../config.cjs";
import pkg, { prepareWAMessageMedia } from "@whiskeysockets/baileys";
const { generateWAMessageFromContent, proto } = pkg;
import axios from "axios";

// Time logic
const xtime = moment.tz("Africa/Nairobi").format("HH:mm:ss");
const xdate = moment.tz("Africa/Nairobi").format("DD/MM/YYYY");
const time2 = moment().tz("Africa/Nairobi").format("HH:mm:ss");
let pushwish = "";

if (time2 < "05:00:00") {
  pushwish = `Good Morning üåÑ`;
} else if (time2 < "11:00:00") {
  pushwish = `Good Morning üåÑ`;
} else if (time2 < "15:00:00") {
  pushwish = `Good Afternoon üåÖ`;
} else if (time2 < "18:00:00") {
  pushwish = `Good Evening üåÉ`;
} else if (time2 < "19:00:00") {
  pushwish = `Good Evening üåÉ`;
} else {
  pushwish = `Good Night üåå`;
}

// Fancy font utility
function toFancyFont(text, isUpperCase = false) {
  const fonts = {
    A: "ùòº",
    B: "ùòΩ",
    C: "ùòæ",
    D: "ùòø",
    E: "ùôÄ",
    F: "ùôÅ",
    G: "ùôÇ",
    H: "ùôÉ",
    I: "ùôÑ",
    J: "ùôÖ",
    K: "ùôÜ",
    L: "ùôá",
    M: "ùôà",
    N: "ùôâ",
    O: "ùôä",
    P: "ùôã",
    Q: "ùôå",
    R: "ùôç",
    S: "ùôé",
    T: "ùôè",
    U: "ùôê",
    V: "ùôë",
    W: "ùôí",
    X: "ùôì",
    Y: "ùôî",
    Z: "ùôï",
    a: "ùôñ",
    b: "ùôó",
    c: "ùôò",
    d: "ùôô",
    e: "ùôö",
    f: "ùôõ",
    g: "ùôú",
    h: "ùôù",
    i: "ùôû",
    j: "ùôü",
    k: "ùô†",
    l: "ùô°",
    m: "ùô¢",
    n: "ùô£",
    o: "ùô§",
    p: "ùô•",
    q: "ùô¶",
    r: "ùôß",
    s: "ùô®",
    t: "ùô©",
    u: "ùô™",
    v: "ùô´",
    w: "ùô¨",
    x: "ùô≠",
    y: "ùôÆ",
    z: "ùôØ",
  };
  const formattedText = isUpperCase ? text.toUpperCase() : text.toLowerCase();
  return formattedText
    .split("")
    .map((char) => fonts[char] || char)
    .join("");
}

// Image fetch utility
async function fetchMenuImage() {
  const imageUrl = "https://files.catbox.moe/y2utve.jpg";
  for (let i = 0; i < 3; i++) {
    try {
      const response = await axios.get(imageUrl, { responseType: "arraybuffer" });
      return Buffer.from(response.data, "binary");
    } catch (error) {
      if (error.response?.status === 429 && i < 2) {
        console.log(`Rate limit hit, retrying in 2s...`);
        await new Promise((resolve) => setTimeout(resolve, 2000));
        continue;
      }
      console.error("‚ùå Failed to fetch image:", error);
      return null;
    }
  }
}

const menu = async (m, Matrix) => {
  try {
    const prefix = config.PREFIX;
    const cmd = m.body.startsWith(prefix) ? m.body.slice(prefix.length).split(" ")[0].toLowerCase() : "";
    const mode = config.MODE === "public" ? "public" : "private";
    const totalCommands = 70;

    const validCommands = ["list", "help", "menu"];
    const subMenuCommands = [
      "download-menu",
      "converter-menu",
      "ai-menu",
      "tools-menu",
      "group-menu",
      "search-menu",
      "main-menu",
      "owner-menu",
      "stalk-menu",
    ];

    // Fetch image for all cases
    const menuImage = await fetchMenuImage();

    // Handle main menu
    if (validCommands.includes(cmd)) {
      const mainMenu = `
‚óà‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚óà
‚îÇ‚ùí ${toFancyFont("Toxic-MD")} Command Menu ‚ö†
‚îÇ
‚îÇ ü§ñ *${toFancyFont("Bot")}*: ${toFancyFont("Toxic-MD")}
‚îÇ üìã *${toFancyFont("Total Commands")}*: ${totalCommands}
‚îÇ üî£ *${toFancyFont("Prefix")}*: ${prefix}
‚îÇ üåê *${toFancyFont("Mode")}*: ${mode}
‚îÇ üìö *${toFancyFont("Library")}*: Baileys
‚óà‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚óà

${pushwish} @*${m.pushName}*! Select a menu category:

> PœÉ…Ø“Ω…æ“Ω‘É ·Ç¶·Éß TœÉxŒπ∆à-…±‘É»•
`;

      const listButton = {
        buttonText: "Select a menu",
        sections: [
          {
            title: "Menu Categories",
            rows: [
              {
                title: "Download",
                rowId: `${prefix}download-menu`,
                description: "Download menu",
              },
              {
                title: "Converter",
                rowId: `${prefix}converter-menu`,
                description: "Converter menu",
              },
              {
                title: "AI",
                rowId: `${prefix}ai-menu`,
                description: "AI menu",
              },
              {
                title: "Tools",
                rowId: `${prefix}tools-menu`,
                description: "Tools menu",
              },
              {
                title: "Group",
                rowId: `${prefix}group-menu`,
                description: "Group menu",
              },
              {
                title: "Search",
                rowId: `${prefix}search-menu`,
                description: "Search menu",
              },
              {
                title: "Main",
                rowId: `${prefix}main-menu`,
                description: "Main menu",
              },
              {
                title: "Owner",
                rowId: `${prefix}owner-menu`,
                description: "Owner menu",
              },
              {
                title: "Stalk",
                rowId: `${prefix}stalk-menu`,
                description: "Stalk menu",
              },
            ],
          },
        ],
      };

      // Send menu with or without image
      if (menuImage) {
        await Matrix.sendMessage(
          m.from,
          {
            image: menuImage,
            caption: mainMenu,
            buttonText: listButton.buttonText,
            sections: listButton.sections,
            listType: 1,
          },
          { quoted: m }
        );
      } else {
        await Matrix.sendMessage(
          m.from,
          {
            text: mainMenu,
            buttonText: listButton.buttonText,
            sections: listButton.sections,
            listType: 1,
          },
          { quoted: m }
        );
      }

      Matrix.ev.on("messages.upsert", async (update) => {
        const msg = update.messages[0];
        if (msg.key.remoteJid === m.from && msg.listResponseMessage) {
          const selectedOption = msg.listResponseMessage.singleSelectReply.selectedRowId;
          if (selectedOption) {
            await Matrix.sendMessage(m.from, { text: `You selected: ${selectedOption}` });
            // Call the corresponding menu function
            await handleMenu(m, Matrix, selectedOption);
          }
        }
      });
    }
  } catch (error) {
    console.error(`‚ùå Menu error: ${error.message}`);
    await Matrix.sendMessage(m.from, {
      text: `‚óà‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚óà
‚îÇ‚ùí *Toxic-MD* hit a snag! Error: ${error.message || "Failed to load menu"} üò°
‚óà‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚óà`,
    }, { quoted: m });
  }
};

const handleMenu = async (m, Matrix, selectedOption) => {
  try {
    // Handle sub-menu commands
    let menuTitle;
    let menuResponse;

    switch (selectedOption) {
      case `${config.PREFIX}download-menu`:
        menuTitle = "Download";
        menuResponse = `
‚óà‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚óà
‚îÇ‚ùí ${toFancyFont("Download")} üì•
‚îÇ ‚úò *${toFancyFont("apk")}*
‚îÇ ‚úò *${toFancyFont("facebook")}*
‚îÇ ‚úò *${toFancyFont("mediafire")}*
‚îÇ ‚úò *${toFancyFont("pinters")}*
‚îÇ ‚úò *${toFancyFont("gitclone")}*
‚îÇ ‚úò *${toFancyFont("gdrive")}*
‚îÇ ‚úò *${toFancyFont("insta")}*
‚îÇ ‚úò *${toFancyFont("ytmp3")}*
‚îÇ ‚úò *${toFancyFont("ytmp4")}*
‚îÇ ‚úò *${toFancyFont("play")}*
‚îÇ ‚úò *${toFancyFont("song")}*
‚îÇ ‚úò *${toFancyFont("video")}*
‚îÇ ‚úò *${toFancyFont("ytmp3doc")}*
‚îÇ ‚úò *${toFancyFont("ytmp4doc")}*
‚îÇ ‚úò *${toFancyFont("tiktok")}*
‚óà‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚óà
`;
        break;

      // Add more cases for other menus...

      default:
        return;
    }

    // Format the full response
    const fullResponse = `
‚óà‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚óà
‚îÇ‚ùí ${toFancyFont("Toxic-MD")} - ${toFancyFont(menuTitle)} ‚ö†
‚îÇ
‚îÇ ü§ñ *${toFancyFont("Bot")}*: ${toFancyFont("Toxic-MD")}
‚îÇ üë§ *${toFancyFont("User")}*: ${m.pushName}
‚îÇ üî£ *${toFancyFont("Prefix")}*: ${config.PREFIX}
‚îÇ üìö *${toFancyFont("Library")}*: Baileys
‚óà‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚óà

${menuResponse}

> PœÉ…Ø“Ω…æ“Ω‘É ·Ç¶·Éß TœÉxŒπ∆à-…±‘É»•
`;

    await Matrix.sendMessage(m.from, { text: fullResponse });
  } catch (error) {
    console.error(`‚ùå Menu error: ${error.message}`);
  }
};

export default menu;